#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <curl/curl.h>          // For HTTPS POST
#include "posapi.h"             // QPOS SDK header (for OsGetTermSn, OsLog, etc.)

// Buffer for storing CURL response
struct MemoryStruct {
    char *memory;
    size_t size;
};

// Callback to write received data into memory
static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp)
{
    size_t realsize = size * nmemb;
    struct MemoryStruct *mem = (struct MemoryStruct *)userp;

    char *ptr = realloc(mem->memory, mem->size + realsize + 1);
    if(ptr == NULL) return 0;  // out of memory

    mem->memory = ptr;
    memcpy(&(mem->memory[mem->size]), contents, realsize);
    mem->size += realsize;
    mem->memory[mem->size] = 0;
    return realsize;
}

void SendDeviceRequest(void)
{
    OsLogSetTag("DeviceRequest");
    OsLog(LOG_INFO, "Starting SendDeviceRequest...");

    // 1. Get Serial Number
    char serial[64] = {0};
    if (OsGetTermSn(serial) != RET_OK || serial[0] == 0x00) {
        OsLog(LOG_ERROR, "Failed to get device SN");
        return;
    }

    // 2. Build JSON request
    char postData[512];
    snprintf(postData, sizeof(postData),
        "{"
        "\"info\":{"
            "\"apiKey\":\"YOUR_API_KEY\","
            "\"version\":\"1.0.0\","
            "\"posId\":\"%s\","
            "\"platform\":\"linux\""
        "},"
        "\"data\":{}"
        "}", serial);

    OsLog(LOG_INFO, "Request JSON: %s", postData);

    // 3. Initialize CURL for HTTPS POST
    CURL *curl;
    CURLcode res;
    struct curl_slist *headers = NULL;
    struct MemoryStruct chunk = {0};
    chunk.memory = malloc(1);
    chunk.size = 0;

    curl_global_init(CURL_GLOBAL_DEFAULT);
    curl = curl_easy_init();
    if(curl) {
        headers = curl_slist_append(headers, "Content-Type: application/json");

        curl_easy_setopt(curl, CURLOPT_URL, "https://trumot.onrender.com/YG/device/get");
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, postData);
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)&chunk);
        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);  // skip cert check (optional)
        curl_easy_setopt(curl, CURLOPT_TIMEOUT, 15L);

        // 4. Perform POST request
        res = curl_easy_perform(curl);
        if(res != CURLE_OK) {
            OsLog(LOG_ERROR, "curl_easy_perform() failed: %s", curl_easy_strerror(res));
        } else {
            long response_code = 0;
            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);
            OsLog(LOG_INFO, "HTTP Response Code: %ld", response_code);
            OsLog(LOG_INFO, "Response Body: %s", chunk.memory);
        }

        curl_easy_cleanup(curl);
        curl_slist_free_all(headers);
    }

    free(chunk.memory);
    curl_global_cleanup();

    OsLog(LOG_INFO, "SendDeviceRequest finished");
}
